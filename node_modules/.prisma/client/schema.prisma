generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  icon        String?
  equipment   Equipment[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("categories")
}

model Equipment {
  id             String      @id @default(cuid())
  name           String
  description    String?
  price          Float
  category       Category    @relation(fields: [categoryId], references: [id])
  categoryId     String
  brand          String?
  model          String?
  specifications String?
  imageUrl       String?
  inStock        Boolean     @default(true)
  quoteItems     QuoteItem[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@map("Equipment")
}

model Client {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  company   String?
  address   String?
  city      String?
  country   String?
  quotes    Quote[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("clients")
}

model Installation {
  id               String   @id @default(cuid())
  usageType        String
  spaceSize        String
  spaceDetails     Json?
  installationReqs Json?
  location         String?
  quotes           Quote[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("installations")
}

model Quote {
  id              String        @id @default(cuid())
  quoteNumber     String        @unique
  client          Client        @relation(fields: [clientId], references: [id])
  clientId        String
  installation    Installation? @relation(fields: [installationId], references: [id])
  installationId  String?
  usageType       String
  spaceSize       String?
  budget          Float?
  requirements    Json?
  aiConversation  Json?
  items           QuoteItem[]
  subtotal        Float         @default(0)
  tax             Float         @default(0)
  total           Float         @default(0)
  status          String        @default("draft")
  warrantyPeriod  Int?
  deliveryOptions Json?
  paymentTerms    Json?
  validUntil      DateTime?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("quotes")
}

model QuoteItem {
  id               String    @id @default(cuid())
  quote            Quote     @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteId          String
  equipment        Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId      String
  quantity         Int       @default(1)
  unitPrice        Float
  totalPrice       Float
  installationZone String?
  specifications   Json?
  warrantyInfo     Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("quote_items")
}

model Pricelist {
  id          String    @id @default(cuid())
  name        String
  description String?
  version     String    @default("1.0")
  isActive    Boolean   @default(true)
  markups     Json?
  discounts   Json?
  validFrom   DateTime  @default(now())
  validUntil  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("pricelists")
}

model ContactForm {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  status    String   @default("new")
  formType  String   @default("general")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_forms")
}
